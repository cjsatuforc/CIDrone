#!/bin/bash
# SCRIPT THAT INSTALLS ALL REQUIREMENTS FOR RASPBERRY PI
# AUTHOR: JOSÉ LUIS RODRÍGUEZ FRAGOSO
####################################### FUTURE STEPS ###############################################
### ENABLE PICAMERA                                                                                #
### COPY REQUIRED FILES TO SYSTEM FOLDERS / MODIFY OTHER SCRIPTS TO ADAPT TO THIS SCRIPT DIRECTORY #
####################################################################################################
# DETERMINE IF USER IS ROOT
if [ "`id -u`" -eq 0 ]; then
	id=root
else
	echo -e "You need to be root."
fi

# DETERMINE DIRECTORY OF THIS SCRIPT.
SPATH="`dirname \"$0\"`"              # RELATIVE PATH
SPATH="`( cd \"SPATH\" && pwd )`"  # ABSOLUTE AND NORMALIZED PATH
# IF ERROR [VARIABLE NOT SET] RETURN ERROR
if [ -z "$SPATH" ] ; then
  exit 1
fi

# DETERMINE IF APM REQUIRED FILES EXISTS IN THIS SCRIPT FOLDER.
if [ ! -f ${SPATH}/apm.deb ]; then
	APMFILE=local
fi

# FUNCTIONS FOR ERROR REPORTING.
step() {
    echo -n "$@"

    STEP_OK=0
    [[ -w /tmp ]] && echo $STEP_OK > /tmp/step.$$
}

try() {
    # CHECK FOR `-B' ARGUMENT TO RUN COMMAND IN THE BACKGROUND.
    local BG=

    [[ $1 == -b ]] && { BG=1; shift; }
    [[ $1 == -- ]] && {       shift; }

    # Run the command.
    if [[ -z $BG ]]; then
        "$@"
    else
        "$@" &
    fi

    # CHECK IF COMMAND FAILED AND UPDATE $STEP_OK IF SO.
    local EXIT_CODE=$?

    if [[ $EXIT_CODE -ne 0 ]]; then
        STEP_OK=$EXIT_CODE
        [[ -w /tmp ]] && echo $STEP_OK > /tmp/step.$$

        if [[ -n $LOG_STEPS ]]; then
            local FILE=$(readlink -m "${BASH_SOURCE[1]}")
            local LINE=${BASH_LINENO[0]}

            echo "$FILE: line $LINE: Command \`$*' failed with exit code $EXIT_CODE." >> "$LOG_STEPS"
        fi
    fi

    return $EXIT_CODE
}

next() {
    [[ -f /tmp/step.$$ ]] && { STEP_OK=$(< /tmp/step.$$); rm -f /tmp/step.$$; }
    [[ $STEP_OK -eq 0 ]]  && echo_success || echo_failure
    echo

    return $STEP_OK
}

# INSTALL ALL REQUIRED FILES.
if [[ $id -eq root ]]; then

	# UPDATE SYSTEM.
	step "Updating system repositories ..."
	try apt-get update
	next

	step "Updating packages ..."
	try apt-get upgrade
	next

	step "Updating system ..."
	try apt-get dist-upgrade
	next

	step "Upadting Raspberry Pi ..."
	next
	try rpi-update

	# INSTALL PYTHON AND DEPENDENCIES.
	step "Installing Python and Python dependencies ..."
	try apt-get install python python-pip
	next

	# OPENCV AND DEPENDENCIES.
	step "Installing OpenCV ..."
	try apt-get install libopencv-dev python-opencv
	next

	step "Installing OpenCV dependencies ..."
	try pip install numpy picamera[array] imutils
	next

	# GSTREAMER FOR VIDEO STREAMING [EMLID METHOD]. ### TRY LOW LATENCY METHOD POSTED IN HERE [http://petrkout.com/electronics/low-latency-0-4-s-video-streaming-from-raspberry-pi-mjpeg-streamer-opencv/] ###
	step "Installing video streaming dependencies ..."
	try apt-get install gstreamer1.0
	next

	# ARDUPILOT MISSION PLANNER
	# IF INSTALLATION FILE EXISTS IN THIS SCRIPT DIRECTORY JUST INSTALL, IF NOT DOWNLOAD AND THEN INSTALL.
	step "Installing APM for mission control ..."
	if [[ -z "${APMFILE}" ]]; then
		try dpkg -i ${SPATH}/apm.deb
		next
	else
		echo -e "Downloading APM from internet ..."
		try wget 'http://files.emlid.com/apm/apm-navio2_3.3.2-rc2-beta-1.2_armhf.deb' -O ${SPATH}/apm-navio2.deb && dpkg -i apm-navio2.deb
		next
	fi
fi